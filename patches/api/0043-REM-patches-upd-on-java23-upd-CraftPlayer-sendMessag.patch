From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: i3w1s <nadejdinkostya@gmail.com>
Date: Thu, 24 Apr 2025 14:38:15 +0300
Subject: [PATCH] REM patches & upd on java23 & upd
 CraftPlayer#sendMessage(...)


diff --git a/pom.xml b/pom.xml
index 6fd6066b16d4dbf8695be16ec8b2d135d4d04901..1153d42ac362f0093efefc787598d948e4bbd9d2 100644
--- a/pom.xml
+++ b/pom.xml
@@ -19,10 +19,11 @@
 
     <properties>
         <!-- <skipTests>true</skipTests> Paper - This [was] not going to end well -->
-        <maven.compiler.source>1.8</maven.compiler.source>
-        <maven.compiler.target>1.8</maven.compiler.target>
+        <skipTests>true</skipTests>
+        <maven.compiler.source>23</maven.compiler.source>
+        <maven.compiler.target>23</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <adventure.version>4.7.0</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
+        <adventure.version>4.20.0</adventure.version> <!-- Paper - When updating this make sure to update the linked JavaDocs on the homepage as well! -->
     </properties>
 
     <repositories>
@@ -95,7 +96,7 @@
         <dependency>
             <groupId>com.google.guava</groupId>
             <artifactId>guava</artifactId>
-            <version>21.0</version>
+            <version>31.0.1-jre</version>
             <scope>compile</scope>
         </dependency>
         <!-- bundled with Minecraft, should be kept in sync -->
@@ -167,19 +168,19 @@
         <dependency>
             <groupId>org.ow2.asm</groupId>
             <artifactId>asm-tree</artifactId>
-            <version>9.1</version>
+            <version>9.8</version>
             <scope>test</scope>
         </dependency>
         <!-- ASM -->
         <dependency>
             <groupId>org.ow2.asm</groupId>
             <artifactId>asm</artifactId>
-            <version>9.0</version>
+            <version>9.8</version>
         </dependency>
         <dependency>
             <groupId>org.ow2.asm</groupId>
             <artifactId>asm-commons</artifactId>
-            <version>9.0</version>
+            <version>9.8</version>
         </dependency>
     </dependencies>
 
diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index dfaa266ff53e43ad48dc5a5a5657fe70600f539a..ea893a41e3c7509f87730b1931f95331a73233fa 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -76,7 +76,6 @@ public class FullServerTickHandler extends TimingHandler {
             TimingsManager.HISTORY.add(new TimingHistory());
             TimingsManager.resetTimings();
         }
-        Bukkit.getUnsafe().reportTimings();
     }
 
     boolean isViolated() {
diff --git a/src/main/java/io/papermc/paper/chat/ChatRenderer.java b/src/main/java/io/papermc/paper/chat/ChatRenderer.java
index 85fd5d6777b53bab09cc54c360bb75141635bdd3..4c35940d8ebcb7d5b180ed89cc5afbf491413224 100644
--- a/src/main/java/io/papermc/paper/chat/ChatRenderer.java
+++ b/src/main/java/io/papermc/paper/chat/ChatRenderer.java
@@ -3,7 +3,6 @@ package io.papermc.paper.chat;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.text.Component;
 import org.bukkit.entity.Player;
-import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -43,7 +42,7 @@ public interface ChatRenderer {
     @NotNull
     static ChatRenderer viewerUnaware(final @NotNull ViewerUnaware renderer) {
         return new ChatRenderer() {
-            private @MonotonicNonNull Component message;
+            private Component message;
 
             @Override
             public @NotNull Component render(final @NotNull Player source, final @NotNull Component sourceDisplayName, final @NotNull Component message, final @NotNull Audience viewer) {
diff --git a/src/main/java/io/papermc/paper/datapack/Datapack.java b/src/main/java/io/papermc/paper/datapack/Datapack.java
index 7b2ab0be10a21e0496ad1d485ff8cb2c0b92a2cb..691586e6e0e64e5d88552313f616e9fc5f58dda1 100644
--- a/src/main/java/io/papermc/paper/datapack/Datapack.java
+++ b/src/main/java/io/papermc/paper/datapack/Datapack.java
@@ -1,19 +1,15 @@
 package io.papermc.paper.datapack;
 
-import org.checkerframework.checker.nullness.qual.NonNull;
-
 public interface Datapack {
 
     /**
      * @return the name of the pack
      */
-    @NonNull
     String getName();
 
     /**
      * @return the compatibility of the pack
      */
-    @NonNull
     Compatibility getCompatibility();
 
     /**
diff --git a/src/main/java/io/papermc/paper/datapack/DatapackManager.java b/src/main/java/io/papermc/paper/datapack/DatapackManager.java
index 58f78d5e91beacaf710f62461cf869f70d08b2a2..24d498d18e5632ea890e60a532243dc023894bd2 100644
--- a/src/main/java/io/papermc/paper/datapack/DatapackManager.java
+++ b/src/main/java/io/papermc/paper/datapack/DatapackManager.java
@@ -1,7 +1,5 @@
 package io.papermc.paper.datapack;
 
-import org.checkerframework.checker.nullness.qual.NonNull;
-
 import java.util.Collection;
 
 public interface DatapackManager {
@@ -9,13 +7,11 @@ public interface DatapackManager {
     /**
      * @return all the packs known to the server
      */
-    @NonNull
     Collection<Datapack> getPacks();
 
     /**
      * @return all the packs which are currently enabled
      */
-    @NonNull
     Collection<Datapack> getEnabledPacks();
 
 }
diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index 718b860ace4077affad715a4e43961e10a83e9d9..7015d8c33c6ab37be021f1b8ee7c6d8775183f85 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -12,8 +12,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.player.PlayerEvent;
-import org.checkerframework.checker.nullness.qual.NonNull;
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
 
 import static java.util.Objects.requireNonNull;
@@ -26,8 +24,8 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     @Deprecated private final Set<Player> recipients;
     private boolean cancelled = false;
     private ChatRenderer renderer;
-    @Deprecated private @Nullable ChatComposer composer;
-    @Deprecated private @Nullable ChatFormatter formatter;
+    @Deprecated private ChatComposer composer;
+    @Deprecated private ChatFormatter formatter;
     private final Component originalMessage;
     private Component message;
 
@@ -291,7 +289,7 @@ public abstract class AbstractChatEvent extends PlayerEvent implements Cancellab
     private @NotNull Audience legacyForwardingAudience() {
         return new ForwardingAudience() {
             @Override
-            public @NonNull Iterable<? extends Audience> audiences() {
+            public Iterable<? extends Audience> audiences() {
                 return AbstractChatEvent.this.viewers;
             }
         };
diff --git a/src/main/java/io/papermc/paper/text/PaperComponents.java b/src/main/java/io/papermc/paper/text/PaperComponents.java
index 77db592d05b754f879f8d1790642e9d9bbd30a4e..14b78315949bd88fdb56313c33adefb88cf54156 100644
--- a/src/main/java/io/papermc/paper/text/PaperComponents.java
+++ b/src/main/java/io/papermc/paper/text/PaperComponents.java
@@ -7,7 +7,6 @@ import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
 import org.bukkit.Bukkit;
-import org.checkerframework.checker.nullness.qual.NonNull;
 
 /**
  * Paper API-specific methods for working with {@link Component}s and related.
@@ -22,23 +21,10 @@ public final class PaperComponents {
      *
      * @return a component flattener
      */
-    public static @NonNull ComponentFlattener flattener() {
+    public static ComponentFlattener flattener() {
         return Bukkit.getUnsafe().componentFlattener();
     }
 
-    /**
-     * Get a serializer for {@link Component}s that will convert components to
-     * a plain-text string.
-     *
-     * <p>Implementations may provide a serializer capable of processing any
-     * information that requires access to implementation details.</p>
-     *
-     * @return a serializer to plain text
-     */
-    public static @NonNull PlainComponentSerializer plainSerializer() {
-        return Bukkit.getUnsafe().plainComponentSerializer();
-    }
-
     /**
      * Get a serializer for {@link Component}s that will convert to and from the
      * standard JSON serialization format using Gson.
@@ -49,7 +35,7 @@ public final class PaperComponents {
      *
      * @return a json component serializer
      */
-    public static @NonNull GsonComponentSerializer gsonSerializer() {
+    public static GsonComponentSerializer gsonSerializer() {
         return Bukkit.getUnsafe().gsonComponentSerializer();
     }
 
@@ -64,7 +50,7 @@ public final class PaperComponents {
      *
      * @return a json component serializer
      */
-    public static @NonNull GsonComponentSerializer colorDownsamplingGsonSerializer() {
+    public static GsonComponentSerializer colorDownsamplingGsonSerializer() {
         return Bukkit.getUnsafe().colorDownsamplingGsonComponentSerializer();
     }
 
@@ -82,7 +68,7 @@ public final class PaperComponents {
      *
      * @return a section serializer
      */
-    public static @NonNull LegacyComponentSerializer legacySectionSerializer() {
+    public static LegacyComponentSerializer legacySectionSerializer() {
         return Bukkit.getUnsafe().legacyComponentSerializer();
     }
 }
diff --git a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
index 6f560a51277ccbd46a9142cfa057d276118c1c7b..bf37af077a91cb112c2235a197a84825e738fde5 100644
--- a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
+++ b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.util;
 
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.AbstractList;
@@ -32,9 +31,9 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
      * @param fromFunction function mapping transformed list element type to backing list element type
      */
     public TransformingRandomAccessList(
-        final @NonNull List<F> fromList,
-        final @NonNull Function<? super F, ? extends T> toFunction,
-        final @NonNull Function<? super T, ? extends F> fromFunction
+        final List<F> fromList,
+        final Function<? super F, ? extends T> toFunction,
+        final Function<? super T, ? extends F> fromFunction
     ) {
         this.fromList = checkNotNull(fromList);
         this.toFunction = checkNotNull(toFunction);
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 560b441ef35e507236e683b04f6a774c5949a078..900e889ac69375df248e9b53663863dd8b4f4a1d 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -3586,6 +3586,7 @@ public enum Material implements Keyed {
      * @return the translation key
      */
     @NotNull
+    @Deprecated
     public String getTranslationKey() {
         return Bukkit.getUnsafe().getTranslationKey(this);
     }
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index d0ce64412276512cde133937a85a3340a70eea6d..6b0b2b32e354527b9571bfbc677b81b5d88da10e 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -1020,7 +1020,7 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
     // Paper start
     @NotNull
     @Override
-    public net.kyori.adventure.key.@org.checkerframework.checker.nullness.qual.NonNull Key key() {
+    public net.kyori.adventure.key.Key key() {
         return this.key;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index b2502aaab690b1414a1adffdf64e5a5456feb99c..53801a3785af0772ab4e9eb2155dd5032a5d4491 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -19,7 +19,6 @@ import org.bukkit.plugin.PluginDescriptionFile;
 public interface UnsafeValues {
     // Paper start
     net.kyori.adventure.text.flattener.ComponentFlattener componentFlattener();
-    net.kyori.adventure.text.serializer.plain.PlainComponentSerializer plainComponentSerializer();
     net.kyori.adventure.text.serializer.gson.GsonComponentSerializer gsonComponentSerializer();
     net.kyori.adventure.text.serializer.gson.GsonComponentSerializer colorDownsamplingGsonComponentSerializer();
     net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer legacyComponentSerializer();
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index ca6d3afd6fa51c0822e289356025b51bc50f55a7..fdf38723c9970feaa55a81328c17c353abe0f877 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -118,12 +118,6 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
     Spigot spigot();
     // Spigot end
 
-    // Paper start
-    @Override
-    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {
-        this.sendMessage(org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(message));
-    }
-
     /**
      * Sends the component to the sender
      *
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index 98027fdd8dbd2c0ed84a065f7b991738ee397a66..64af28b344217c9e683a2956f6b01162063947cb 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -1,112 +1,22 @@
 package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.Validate;
-import org.apache.commons.lang.math.NumberUtils;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
-import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.help.HelpMap;
-import org.bukkit.help.HelpTopic;
-import org.bukkit.help.HelpTopicComparator;
-import org.bukkit.help.IndexHelpTopic;
-import org.bukkit.util.ChatPaginator;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class HelpCommand extends BukkitCommand {
     public HelpCommand() {
         super("help");
-        this.description = "Shows the help menu";
-        this.usageMessage = "/help <pageNumber>\n/help <topic>\n/help <topic> <pageNumber>";
-        this.setAliases(Arrays.asList(new String[]{"?"}));
         this.setPermission("bukkit.command.help");
     }
 
     @Override
     public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
         if (!testPermission(sender)) return true;
-
-        String command;
-        int pageNumber;
-        int pageHeight;
-        int pageWidth;
-
-        if (args.length == 0) {
-            command = "";
-            pageNumber = 1;
-        } else if (NumberUtils.isDigits(args[args.length - 1])) {
-            command = StringUtils.join(ArrayUtils.subarray(args, 0, args.length - 1), " ");
-            try {
-                pageNumber = NumberUtils.createInteger(args[args.length - 1]);
-            } catch (NumberFormatException exception) {
-                pageNumber = 1;
-            }
-            if (pageNumber <= 0) {
-                pageNumber = 1;
-            }
-        } else {
-            command = StringUtils.join(args, " ");
-            pageNumber = 1;
-        }
-
-        if (sender instanceof ConsoleCommandSender) {
-            pageHeight = ChatPaginator.UNBOUNDED_PAGE_HEIGHT;
-            pageWidth = ChatPaginator.UNBOUNDED_PAGE_WIDTH;
-        } else {
-            pageHeight = ChatPaginator.CLOSED_CHAT_PAGE_HEIGHT - 1;
-            pageWidth = ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH;
-        }
-
-        HelpMap helpMap = Bukkit.getServer().getHelpMap();
-        HelpTopic topic = helpMap.getHelpTopic(command);
-
-        if (topic == null) {
-            topic = helpMap.getHelpTopic("/" + command);
-        }
-
-        if (topic == null) {
-            topic = findPossibleMatches(command);
-        }
-
-        if (topic == null || !topic.canSee(sender)) {
-            sender.sendMessage(ChatColor.RED + "No help for " + command);
-            return true;
-        }
-
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(topic.getFullText(sender), pageNumber, pageWidth, pageHeight);
-
-        StringBuilder header = new StringBuilder();
-        header.append(ChatColor.YELLOW);
-        header.append("--------- ");
-        header.append(ChatColor.WHITE);
-        header.append("Help: ");
-        header.append(topic.getName());
-        header.append(" ");
-        if (page.getTotalPages() > 1) {
-            header.append("(");
-            header.append(page.getPageNumber());
-            header.append("/");
-            header.append(page.getTotalPages());
-            header.append(") ");
-        }
-        header.append(ChatColor.YELLOW);
-        for (int i = header.length(); i < ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH; i++) {
-            header.append("-");
-        }
-        sender.sendMessage(header.toString());
-
-        sender.sendMessage(page.getLines());
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "[✘] We don't do that here. (vk.com/HexStudio)");
 
         return true;
     }
@@ -114,117 +24,6 @@ public class HelpCommand extends BukkitCommand {
     @NotNull
     @Override
     public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
-        Validate.notNull(sender, "Sender cannot be null");
-        Validate.notNull(args, "Arguments cannot be null");
-        Validate.notNull(alias, "Alias cannot be null");
-
-        if (args.length == 1) {
-            List<String> matchedTopics = new ArrayList<String>();
-            String searchString = args[0];
-            for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
-                String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
-
-                if (trimmedTopic.startsWith(searchString)) {
-                    matchedTopics.add(trimmedTopic);
-                }
-            }
-            return matchedTopics;
-        }
         return ImmutableList.of();
     }
-
-    @Nullable
-    protected HelpTopic findPossibleMatches(@NotNull String searchString) {
-        int maxDistance = (searchString.length() / 5) + 3;
-        Set<HelpTopic> possibleMatches = new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance());
-
-        if (searchString.startsWith("/")) {
-            searchString = searchString.substring(1);
-        }
-
-        for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
-            String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
-
-            if (trimmedTopic.length() < searchString.length()) {
-                continue;
-            }
-
-            if (Character.toLowerCase(trimmedTopic.charAt(0)) != Character.toLowerCase(searchString.charAt(0))) {
-                continue;
-            }
-
-            if (damerauLevenshteinDistance(searchString, trimmedTopic.substring(0, searchString.length())) < maxDistance) {
-                possibleMatches.add(topic);
-            }
-        }
-
-        if (possibleMatches.size() > 0) {
-            return new IndexHelpTopic("Search", null, null, possibleMatches, "Search for: " + searchString);
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Computes the Dameraur-Levenshtein Distance between two strings. Adapted
-     * from the algorithm at <a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance">Wikipedia: Damerau–Levenshtein distance</a>
-     *
-     * @param s1 The first string being compared.
-     * @param s2 The second string being compared.
-     * @return The number of substitutions, deletions, insertions, and
-     * transpositions required to get from s1 to s2.
-     */
-    protected static int damerauLevenshteinDistance(@Nullable String s1, @Nullable String s2) {
-        if (s1 == null && s2 == null) {
-            return 0;
-        }
-        if (s1 != null && s2 == null) {
-            return s1.length();
-        }
-        if (s1 == null && s2 != null) {
-            return s2.length();
-        }
-
-        int s1Len = s1.length();
-        int s2Len = s2.length();
-        int[][] H = new int[s1Len + 2][s2Len + 2];
-
-        int INF = s1Len + s2Len;
-        H[0][0] = INF;
-        for (int i = 0; i <= s1Len; i++) {
-            H[i + 1][1] = i;
-            H[i + 1][0] = INF;
-        }
-        for (int j = 0; j <= s2Len; j++) {
-            H[1][j + 1] = j;
-            H[0][j + 1] = INF;
-        }
-
-        Map<Character, Integer> sd = new HashMap<Character, Integer>();
-        for (char Letter : (s1 + s2).toCharArray()) {
-            if (!sd.containsKey(Letter)) {
-                sd.put(Letter, 0);
-            }
-        }
-
-        for (int i = 1; i <= s1Len; i++) {
-            int DB = 0;
-            for (int j = 1; j <= s2Len; j++) {
-                int i1 = sd.get(s2.charAt(j - 1));
-                int j1 = DB;
-
-                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
-                    H[i + 1][j + 1] = H[i][j];
-                    DB = j;
-                } else {
-                    H[i + 1][j + 1] = Math.min(H[i][j], Math.min(H[i + 1][j], H[i][j + 1])) + 1;
-                }
-
-                H[i + 1][j + 1] = Math.min(H[i + 1][j + 1], H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
-            }
-            sd.put(s1.charAt(i - 1), i);
-        }
-
-        return H[s1Len + 1][s2Len + 1];
-    }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 37cc5d7e9db89e4ef7ab16da1b159bd19134a4ff..5f425fc1e8cb016ddafca0b7db57a11191359c6e 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -91,7 +91,7 @@ public class PluginsCommand extends BukkitCommand {
     @NotNull
     private BaseComponent[] getPluginListSpigot() {
         Plugin[] plugins = Arrays.stream(Bukkit.getPluginManager().getPlugins()).sorted(Comparator.comparing(plugin -> plugin.getName().toLowerCase())).toArray(Plugin[]::new); // Purpur
-        ComponentBuilder pluginList = new ComponentBuilder("Plugins (" + plugins.length + "): ");
+        ComponentBuilder pluginList = new ComponentBuilder("[✉] Plugins list (" + plugins.length + "): ");
 
         int index = 0;
         for (Plugin plugin : plugins) {
@@ -102,33 +102,28 @@ public class PluginsCommand extends BukkitCommand {
             // Event components
             PluginDescriptionFile description = plugin.getDescription();
             ComponentBuilder hoverEventComponents = new ComponentBuilder();
-            hoverEventComponents.append("Version: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getVersion()).color(net.md_5.bungee.api.ChatColor.GREEN);
-
-            if (description.getDescription() != null) {
-                hoverEventComponents.append("\nDescription: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getDescription()).color(net.md_5.bungee.api.ChatColor.GREEN);
-            }
+            hoverEventComponents.append("★ Version: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getVersion()).color(net.md_5.bungee.api.ChatColor.GREEN);
 
             if (description.getWebsite() != null) {
-                hoverEventComponents.append("\nWebsite: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getWebsite()).color(net.md_5.bungee.api.ChatColor.GREEN);
+                hoverEventComponents.append("\n❖ Website: ").color(net.md_5.bungee.api.ChatColor.WHITE).append("https://vk.com/HexStudio/").color(net.md_5.bungee.api.ChatColor.GREEN);
             }
 
             if (!description.getAuthors().isEmpty()) {
                 if (description.getAuthors().size() == 1) {
-                    hoverEventComponents.append("\nAuthor: ");
+                    hoverEventComponents.append("\n✎ Author: ");
                 } else {
-                    hoverEventComponents.append("\nAuthors: ");
+                    hoverEventComponents.append("\n✎ Authors: ");
                 }
 
                 hoverEventComponents.color(net.md_5.bungee.api.ChatColor.WHITE).append(getAuthors(description));
             }
 
             HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, hoverEventComponents.create());
-            ClickEvent clickEvent = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/version " + description.getName());
 
             // Plugin list entry
             pluginList.append(plugin.getDescription().getName());
             pluginList.color(plugin.isEnabled() ? net.md_5.bungee.api.ChatColor.GREEN : net.md_5.bungee.api.ChatColor.RED);
-            pluginList.event(hoverEvent).event(clickEvent);
+            pluginList.event(hoverEvent);
 
             if (plugin.getDescription().getProvides().size() > 0) {
                 pluginList.append("( ", FormatRetention.NONE).color(net.md_5.bungee.api.ChatColor.WHITE).append(String.join(", ", plugin.getDescription().getProvides())).append(")");
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index 0c7ba0718de2b93d013968ca0fec34ffd423990f..877d7d87a9f1d761a0f1d3d9194c1316a6d12d6a 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -1,9 +1,8 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
-import org.bukkit.Bukkit;
+
+import com.google.common.collect.ImmutableList;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -12,47 +11,13 @@ import org.jetbrains.annotations.NotNull;
 public class ReloadCommand extends BukkitCommand {
     public ReloadCommand(@NotNull String name) {
         super(name);
-        this.description = "Reloads the server configuration and plugins";
-        this.usageMessage = "/reload [permissions|commands|confirm]"; // Paper
         this.setPermission("bukkit.command.reload");
-        this.setAliases(Arrays.asList("rl"));
     }
 
     @Override
     public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) { // Paper
         if (!testPermission(sender)) return true;
-
-        // Paper start - Reload permissions.yml & require confirm
-        boolean confirmed = System.getProperty("LetMeReload") != null;
-        if (args.length == 1) {
-            if (args[0].equalsIgnoreCase("permissions")) {
-                Bukkit.getServer().reloadPermissions();
-                Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Permissions successfully reloaded.");
-                return true;
-            } else if ("commands".equalsIgnoreCase(args[0])) {
-                if (Bukkit.getServer().reloadCommandAliases()) {
-                    Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Command aliases successfully reloaded.");
-                } else {
-                    Command.broadcastCommandMessage(sender, ChatColor.RED + "An error occurred while trying to reload command aliases.");
-                }
-                return true;
-            } else if ("confirm".equalsIgnoreCase(args[0])) {
-                confirmed = true;
-            } else {
-                Command.broadcastCommandMessage(sender, ChatColor.RED + "Usage: " + usageMessage);
-                return true;
-            }
-        }
-        if (!confirmed) {
-            Command.broadcastCommandMessage(sender, ChatColor.RED + "Are you sure you wish to reload your server? Doing so may cause bugs and memory leaks. It is recommended to restart instead of using /reload. To confirm, please type " + ChatColor.YELLOW + "/reload confirm");
-            return true;
-        }
-        // Paper end
-
-        Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues when using some plugins.");
-        Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
-        Bukkit.reload();
-        Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "[✘] We don't do that here. (vk.com/HexStudio)");
 
         return true;
     }
@@ -60,6 +25,6 @@ public class ReloadCommand extends BukkitCommand {
     @NotNull
     @Override
     public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
-        return com.google.common.collect.Lists.newArrayList("permissions", "commands"); // Paper
+        return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 4c2ddc722a9dc4011906ad9530b13fa9be1d3ff9..abbcddae5c30d03df438a303bdc68144a00ba9c5 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -1,287 +1,32 @@
 package org.bukkit.command.defaults;
 
-import com.destroystokyo.paper.util.VersionFetcher; // Paper - version supplier
-import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
-import com.google.common.io.Resources;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSyntaxException;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.util.ArrayList;
+
 import java.util.Arrays;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
-import java.util.concurrent.locks.ReentrantLock;
-import net.kyori.adventure.text.Component; // Paper
-import org.apache.commons.lang.Validate;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 
 public class VersionCommand extends BukkitCommand {
-    private VersionFetcher versionFetcher;
-    private VersionFetcher getVersionFetcher() { // lazy load because unsafe isn't available at command registration
-        if (versionFetcher == null) {
-            versionFetcher = Bukkit.getUnsafe().getVersionFetcher();
-        }
-
-        return versionFetcher;
-    }
-
     public VersionCommand(@NotNull String name) {
         super(name);
-
-        this.description = "Gets the version of this server including any plugins in use";
-        this.usageMessage = "/version [plugin name]";
         this.setPermission("bukkit.command.version");
-        this.setAliases(Arrays.asList("ver", "about"));
+        this.setAliases(Arrays.asList("ver"));
     }
 
     @Override
     public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
         if (!testPermission(sender)) return true;
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "[✘] We don't do that here. (vk.com/HexStudio)");
 
-        if (args.length == 0) {
-            //sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")"); // Paper - moved to setVersionMessage
-            sendVersion(sender);
-        } else {
-            StringBuilder name = new StringBuilder();
-
-            for (String arg : args) {
-                if (name.length() > 0) {
-                    name.append(' ');
-                }
-
-                name.append(arg);
-            }
-
-            String pluginName = name.toString();
-            Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
-            if (exactPlugin != null) {
-                describeToSender(exactPlugin, sender);
-                return true;
-            }
-
-            boolean found = false;
-            pluginName = pluginName.toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-                if (plugin.getName().toLowerCase(java.util.Locale.ENGLISH).contains(pluginName)) {
-                    describeToSender(plugin, sender);
-                    found = true;
-                }
-            }
-
-            if (!found) {
-                sender.sendMessage("This server is not running any plugin by that name.");
-                sender.sendMessage("Use /plugins to get a list of plugins.");
-            }
-        }
         return true;
     }
 
-    private void describeToSender(@NotNull Plugin plugin, @NotNull CommandSender sender) {
-        PluginDescriptionFile desc = plugin.getDescription();
-        sender.sendMessage(ChatColor.GREEN + desc.getName() + ChatColor.WHITE + " version " + ChatColor.GREEN + desc.getVersion());
-
-        if (desc.getDescription() != null) {
-            sender.sendMessage(desc.getDescription());
-        }
-
-        if (desc.getWebsite() != null) {
-            sender.sendMessage("Website: " + ChatColor.GREEN + desc.getWebsite());
-        }
-
-        if (!desc.getAuthors().isEmpty()) {
-            if (desc.getAuthors().size() == 1) {
-                sender.sendMessage("Author: " + getNameList(desc.getAuthors()));
-            } else {
-                sender.sendMessage("Authors: " + getNameList(desc.getAuthors()));
-            }
-        }
-
-        if (!desc.getContributors().isEmpty()) {
-            sender.sendMessage("Contributors: " + getNameList(desc.getContributors()));
-        }
-    }
-
-    @NotNull
-    private String getNameList(@NotNull final List<String> names) {
-        StringBuilder result = new StringBuilder();
-
-        for (int i = 0; i < names.size(); i++) {
-            if (result.length() > 0) {
-                result.append(ChatColor.WHITE);
-
-                if (i < names.size() - 1) {
-                    result.append(", ");
-                } else {
-                    result.append(" and ");
-                }
-            }
-
-            result.append(ChatColor.GREEN);
-            result.append(names.get(i));
-        }
-
-        return result.toString();
-    }
-
     @NotNull
     @Override
     public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
-        Validate.notNull(sender, "Sender cannot be null");
-        Validate.notNull(args, "Arguments cannot be null");
-        Validate.notNull(alias, "Alias cannot be null");
-
-        if (args.length == 1) {
-            List<String> completions = new ArrayList<String>();
-            String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-                if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
-                    completions.add(plugin.getName());
-                }
-            }
-            return completions;
-        }
         return ImmutableList.of();
     }
-
-    private final ReentrantLock versionLock = new ReentrantLock();
-    private boolean hasVersion = false;
-    private Component versionMessage = null; // Paper
-    private final Set<CommandSender> versionWaiters = new HashSet<CommandSender>();
-    private boolean versionTaskStarted = false;
-    private long lastCheck = 0;
-
-    private void sendVersion(@NotNull CommandSender sender) {
-        if (hasVersion) {
-            if (System.currentTimeMillis() - lastCheck > getVersionFetcher().getCacheTime()) { // Paper - use version supplier
-                lastCheck = System.currentTimeMillis();
-                hasVersion = false;
-            } else {
-                sender.sendMessage(versionMessage);
-                return;
-            }
-        }
-        versionLock.lock();
-        try {
-            if (hasVersion) {
-                sender.sendMessage(versionMessage);
-                return;
-            }
-            versionWaiters.add(sender);
-            sender.sendMessage(Component.text("Checking version, please wait...", net.kyori.adventure.text.format.NamedTextColor.WHITE, net.kyori.adventure.text.format.TextDecoration.ITALIC)); // Paper
-            if (!versionTaskStarted) {
-                versionTaskStarted = true;
-                new Thread(new Runnable() {
-
-                    @Override
-                    public void run() {
-                        obtainVersion();
-                    }
-                }).start();
-            }
-        } finally {
-            versionLock.unlock();
-        }
-    }
-
-    private void obtainVersion() {
-        String version = Bukkit.getVersion();
-        // Paper start
-        if (version.startsWith("null")) { // running from ide?
-            setVersionMessage(Component.text("Unknown version, custom build?", net.kyori.adventure.text.format.NamedTextColor.YELLOW));
-            return;
-        }
-        setVersionMessage(getVersionFetcher().getVersionMessage(version));
-        /*
-        if (version == null) version = "Custom";
-        String[] parts = version.substring(0, version.indexOf(' ')).split("-");
-        if (parts.length == 4) {
-            int cbVersions = getDistance("craftbukkit", parts[3]);
-            int spigotVersions = getDistance("spigot", parts[2]);
-            if (cbVersions == -1 || spigotVersions == -1) {
-                setVersionMessage("Error obtaining version information");
-            } else {
-                if (cbVersions == 0 && spigotVersions == 0) {
-                    setVersionMessage("You are running the latest version");
-                } else {
-                    setVersionMessage("You are " + (cbVersions + spigotVersions) + " version(s) behind");
-                }
-            }
-
-        } else if (parts.length == 3) {
-            int cbVersions = getDistance("craftbukkit", parts[2]);
-            if (cbVersions == -1) {
-                setVersionMessage("Error obtaining version information");
-            } else {
-                if (cbVersions == 0) {
-                    setVersionMessage("You are running the latest version");
-                } else {
-                    setVersionMessage("You are " + cbVersions + " version(s) behind");
-                }
-            }
-        } else {
-            setVersionMessage("Unknown version, custom build?");
-        }
-         */
-        // Paper end
-    }
-
-    // Paper start
-    private void setVersionMessage(final @NotNull Component msg) {
-        lastCheck = System.currentTimeMillis();
-        final Component message = net.kyori.adventure.text.TextComponent.ofChildren(
-            Component.text("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")", net.kyori.adventure.text.format.NamedTextColor.WHITE),
-            Component.newline(),
-            msg
-        );
-        this.versionMessage = Component.text()
-            .append(message)
-            .hoverEvent(Component.text("Click to copy to clipboard", net.kyori.adventure.text.format.NamedTextColor.WHITE))
-            .clickEvent(net.kyori.adventure.text.event.ClickEvent.copyToClipboard(net.kyori.adventure.text.serializer.plain.PlainComponentSerializer.plain().serialize(message)))
-            .build();
-        // Paper end
-        versionLock.lock();
-        try {
-            hasVersion = true;
-            versionTaskStarted = false;
-            for (CommandSender sender : versionWaiters) {
-                sender.sendMessage(versionMessage);
-            }
-            versionWaiters.clear();
-        } finally {
-            versionLock.unlock();
-        }
-    }
-
-    private static int getDistance(@NotNull String repo, @NotNull String hash) {
-        try {
-            BufferedReader reader = Resources.asCharSource(
-                    new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, "UTF-8") + "&withCounts=true"),
-                    Charsets.UTF_8
-            ).openBufferedStream();
-            try {
-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
-                return obj.get("totalCount").getAsInt();
-            } catch (JsonSyntaxException ex) {
-                ex.printStackTrace();
-                return -1;
-            } finally {
-                reader.close();
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-            return -1;
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 94688093671949551992a8c80904cd6042deb83b..38c9329addd9b5af2cf2d04eac4b55f31e33baaf 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -1,5 +1,7 @@
 package org.bukkit.event.player;
 
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -18,8 +20,8 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     @Deprecated // Paper
     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {
         super(playerKicked);
-        this.kickReason = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickReason); // Paper
-        this.leaveMessage = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(leaveMessage); // Paper
+        this.kickReason = Component.text(kickReason); // Paper
+        this.leaveMessage = Component.text(leaveMessage); // Paper
         this.cause  = Cause.UNKNOWN; // Paper
         this.cancel = false;
     }
@@ -87,7 +89,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     @NotNull
     @Deprecated // Paper // Purpur - conflict on change
     public String getReason() {
-        return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.kickReason); // Paper
+        return LegacyComponentSerializer.legacySection().serialize(this.kickReason);
     }
 
     /**
@@ -99,7 +101,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     @NotNull
     @Deprecated // Paper // Purpur - conflict on change
     public String getLeaveMessage() {
-        return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.leaveMessage); // Paper
+        return LegacyComponentSerializer.legacySection().serialize(this.leaveMessage); // Paper
     }
 
     @Override
@@ -120,7 +122,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      */
     @Deprecated // Paper // Purpur - conflict on change
     public void setReason(@NotNull String kickReason) {
-        this.kickReason = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickReason); // Paper
+        this.kickReason = LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper
     }
 
     /**
@@ -131,7 +133,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      */
     @Deprecated // Paper // Purpur - conflict on change
     public void setLeaveMessage(@NotNull String leaveMessage) {
-        this.leaveMessage = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(leaveMessage); // Paper
+        this.leaveMessage = LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
index 8f00cb2e3bc9963e9657c1b2493e8b015a6664d0..3af2e2fcc557d50941d35c0e5daa1f9d5b168d4e 100644
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -158,7 +158,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return An array of ItemStacks from the inventory. Individual items may be null.
      */
-    public @org.checkerframework.checker.nullness.qual.Nullable ItemStack @org.checkerframework.checker.nullness.qual.NonNull [] getContents(); // Paper - make array elements nullable instead array
+    public ItemStack [] getContents(); // Paper - make array elements nullable instead array
     
     /**
      * Completely replaces the inventory's contents. Removes all existing
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 6ec728854333cd473528162b6381e7a5a83532d8..b1604d0a96f1b79822fe241920a3984c98c51490 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -2,11 +2,8 @@ package org.bukkit.inventory.meta;
 
 import java.util.List;
 
-import net.kyori.adventure.inventory.Book;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Material;
-import org.checkerframework.checker.nullness.qual.NonNull;
-import org.checkerframework.common.returnsreceiver.qual.This;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -146,7 +143,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      */
     @NotNull
     @Override
-    @This BookMeta title(@Nullable net.kyori.adventure.text.Component title);
+    BookMeta title(@Nullable net.kyori.adventure.text.Component title);
 
     /**
      * Gets the author of the book.
@@ -168,7 +165,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      */
     @NotNull
     @Override
-    @This BookMeta author(@Nullable net.kyori.adventure.text.Component author);
+    BookMeta author(@Nullable net.kyori.adventure.text.Component author);
     /**
      * Gets the specified page in the book. The page must exist.
      * <p>
@@ -229,7 +226,6 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
     }
 
     @Override
-    @NonNull
     BookMetaBuilder toBuilder();
 
     // Paper end
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index b622cedeeee017f042bcf92485d81832030a8030..ce16807a60ab08a8005724cebed0052f82a3254b 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -4,7 +4,6 @@ import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.Collection;
@@ -25,7 +24,6 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.PluginDisableEvent;
@@ -43,7 +41,6 @@ import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
 /**
diff --git a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
index 939afec1f21f46170d5eff286cf9d698c233e1f4..e53df4089bc2e44ed531adc7a18c309ea15766b4 100644
--- a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
@@ -1,128 +1,17 @@
 // CHECKSTYLE:OFF
 package org.bukkit.plugin.java;
 
-import java.io.File;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLClassLoader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.apache.maven.repository.internal.MavenRepositorySystemUtils;
 import org.bukkit.plugin.PluginDescriptionFile;
-import org.eclipse.aether.DefaultRepositorySystemSession;
-import org.eclipse.aether.RepositorySystem;
-import org.eclipse.aether.artifact.Artifact;
-import org.eclipse.aether.artifact.DefaultArtifact;
-import org.eclipse.aether.collection.CollectRequest;
-import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
-import org.eclipse.aether.graph.Dependency;
-import org.eclipse.aether.impl.DefaultServiceLocator;
-import org.eclipse.aether.repository.LocalRepository;
-import org.eclipse.aether.repository.RemoteRepository;
-import org.eclipse.aether.repository.RepositoryPolicy;
-import org.eclipse.aether.resolution.ArtifactResult;
-import org.eclipse.aether.resolution.DependencyRequest;
-import org.eclipse.aether.resolution.DependencyResolutionException;
-import org.eclipse.aether.resolution.DependencyResult;
-import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;
-import org.eclipse.aether.spi.connector.transport.TransporterFactory;
-import org.eclipse.aether.transfer.AbstractTransferListener;
-import org.eclipse.aether.transfer.TransferCancelledException;
-import org.eclipse.aether.transfer.TransferEvent;
-import org.eclipse.aether.transport.http.HttpTransporterFactory;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 class LibraryLoader
 {
-
-    private final Logger logger;
-    private final RepositorySystem repository;
-    private final DefaultRepositorySystemSession session;
-    private final List<RemoteRepository> repositories;
-
-    public LibraryLoader(@NotNull Logger logger)
-    {
-        this.logger = logger;
-
-        DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
-        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );
-        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );
-
-        this.repository = locator.getService( RepositorySystem.class );
-        this.session = MavenRepositorySystemUtils.newSession();
-
-        session.setChecksumPolicy( RepositoryPolicy.CHECKSUM_POLICY_FAIL );
-        session.setLocalRepositoryManager( repository.newLocalRepositoryManager( session, new LocalRepository( "libraries" ) ) );
-        session.setTransferListener( new AbstractTransferListener()
-        {
-            @Override
-            public void transferStarted(@NotNull TransferEvent event) throws TransferCancelledException
-            {
-                logger.log( Level.INFO, "Downloading {0}", event.getResource().getRepositoryUrl() + event.getResource().getResourceName() );
-            }
-        } );
-        session.setReadOnly();
-
-        this.repositories = repository.newResolutionRepositories( session, Arrays.asList( new RemoteRepository.Builder( "central", "default", "https://repo.maven.apache.org/maven2" ).build() ) );
-    }
+    public LibraryLoader(@NotNull Logger logger) {}
 
     @Nullable
-    public ClassLoader createLoader(@NotNull PluginDescriptionFile desc)
-    {
-        if ( desc.getLibraries().isEmpty() )
-        {
-            return null;
-        }
-        logger.log( Level.INFO, "[{0}] Loading {1} libraries... please wait", new Object[]
-        {
-            desc.getName(), desc.getLibraries().size()
-        } );
-
-        List<Dependency> dependencies = new ArrayList<>();
-        for ( String library : desc.getLibraries() )
-        {
-            Artifact artifact = new DefaultArtifact( library );
-            Dependency dependency = new Dependency( artifact, null );
-
-            dependencies.add( dependency );
-        }
-
-        DependencyResult result;
-        try
-        {
-            result = repository.resolveDependencies( session, new DependencyRequest( new CollectRequest( (Dependency) null, dependencies, repositories ), null ) );
-        } catch ( DependencyResolutionException ex )
-        {
-            throw new RuntimeException( "Error resolving libraries", ex );
-        }
-
-        List<URL> jarFiles = new ArrayList<>();
-        for ( ArtifactResult artifact : result.getArtifactResults() )
-        {
-            File file = artifact.getArtifact().getFile();
-
-            URL url;
-            try
-            {
-                url = file.toURI().toURL();
-            } catch ( MalformedURLException ex )
-            {
-                throw new AssertionError( ex );
-            }
-
-            jarFiles.add( url );
-            logger.log( Level.INFO, "[{0}] Loaded library {1}", new Object[]
-            {
-                desc.getName(), file
-            } );
-        }
-
-        URLClassLoader loader = new URLClassLoader( jarFiles.toArray( new URL[ jarFiles.size() ] ) );
-
-        return loader;
+    public ClassLoader createLoader(@NotNull PluginDescriptionFile desc) {
+        return null;
     }
 }
